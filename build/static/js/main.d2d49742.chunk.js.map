{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","length","slice","previousOperand","evaluate","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2d49742.chunk.js","sourcesContent":["import {ACTIONS} from './App'\nexport default function DigitButton({ dispatch, digit }){\n    return <button onClick={() => dispatch({ type: ACTIONS.ADD_DIGGIT, payload: {digit}})}>{digit}</button>\n}","import {ACTIONS} from './App'\nexport default function OperationButton({ dispatch, operation }){\n    return <button onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: {operation}})}>{operation}</button>\n}","import { useReducer } from \"react\"\nimport './App.css';\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\n\nexport const ACTIONS = {\n  ADD_DIGGIT: 'add-diggit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload }) {\n  switch(type){\n    case ACTIONS.ADD_DIGGIT:\n      if (state.overwrite){\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        }\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") { \n        return state \n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n        \n      }\n      case ACTIONS.DELETE_DIGGIT:\n        if (state.overwrite) {\n          return {\n            ...state,\n            overwrite: false,\n            currentOperand: null\n          }\n        }\n        if (state.currentOperand == null) return state\n        if (state.currentOperand.length === 1){\n          return {\n            ...state,\n            currentOperand: null\n          }\n        }\n        return{\n          ...state,\n          currentOperand: state.currentOperand.slice(0, -1)\n        }\n      case ACTIONS.CHOOSE_OPERATION:\n        if (state.currentOperand == null && state.previousOperand == null){\n          return state\n        }\n\n        if (state.currentOperand == null){\n          return {\n            ...state,\n            operation: payload.operation\n          }\n        }\n\n        if (state.previousOperand == null){\n          return {\n            ...state,\n            operation: payload.operation,\n            previousOperand: state.currentOperand,\n            currentOperand: null\n          }\n        }\n        return {\n          ...state,\n          previousOperand: evaluate(state),\n          operation: payload.operation,\n          currentOperand: null\n        }\n\n      case ACTIONS.CLEAR:\n        return{\n          ...state,\n          currentOperand: \"0\"\n        }\n\n      case ACTIONS.EVALUATE:\n        if (state.operation == null || state.currentOperand == null || state.previousOperand == null){\n          return state\n        }\n        return {\n          ...state,\n          overwrite: true,\n          previousOperand: null,\n          operation: null,\n          currentOperand: evaluate(state),\n        }\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation}){\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  switch (operation){\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"/\":\n      computation = prev / current\n      break\n  }\n  return computation.toString()\n}\n\nconst INTEGER_FORMATER = new Intl.NumberFormat(\"fr-ca\", {maximumFractionDigits:0,})\n\nfunction formatOperand(operand){\n  if (operand == null) return\n  const [integer, decimal] = operand.split('.')\n  if (decimal == null) return INTEGER_FORMATER.format(integer)\n  return `${INTEGER_FORMATER.format(integer)}.${decimal}`\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n         <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n         <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.CLEAR })}>AC</button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGGIT })}>DEL</button>\n      <OperationButton operation=\"/\" dispatch={dispatch}/>\n      <DigitButton digit=\"1\" dispatch={dispatch}/>\n      <DigitButton digit=\"2\" dispatch={dispatch}/>\n      <DigitButton digit=\"3\" dispatch={dispatch}/>\n      <OperationButton operation=\"*\" dispatch={dispatch}/>\n      <DigitButton digit=\"4\" dispatch={dispatch}/>\n      <DigitButton digit=\"5\" dispatch={dispatch}/>\n      <DigitButton digit=\"6\" dispatch={dispatch}/>\n      <OperationButton operation=\"+\" dispatch={dispatch}/>\n      <DigitButton digit=\"7\" dispatch={dispatch}/>\n      <DigitButton digit=\"8\" dispatch={dispatch}/>\n      <DigitButton digit=\"9\" dispatch={dispatch}/>\n      <OperationButton operation=\"-\" dispatch={dispatch}/>\n      <DigitButton digit=\".\" dispatch={dispatch}/>\n      <DigitButton digit=\"0\" dispatch={dispatch}/>\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}